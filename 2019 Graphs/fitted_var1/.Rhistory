prefpilot = filter(prefpilot,movedur<1.75)
# a=as.data.frame(cbind(pilotdata$subj,pilotdata$eff_mass,pilotdata$exp,pilotdata$targetnum,pilotdata$reacttoback,pilotdata$reaction_tanv,pilotdata$miss_rad,pilotdata$peakvel_target))
# b=as.data.frame(cbind(prefdata$subj,prefdata$eff_mass,prefdata$exp,prefdata$targetnum,prefdata$movedur,prefdata$reaction_tanv,prefdata$miss_rad,prefdata$peakvel_target))
# c=as.data.frame(cbind(smalltdata$subj,smalltdata$eff_mass,smalltdata$exp,smalltdata$targetnum,smalltdata$movedur,smalltdata$reaction_tanv,smalltdata$miss_rad,smalltdata$peakvel_target))
# prefpilot=data.frame(rbind(a,b,c))
# colnames(prefpilot) = cbind('subj','eff_mass','exp','targetnum','movedur','reaction_tanv','miss_rad','peakvel_target')
# prefpilot$movedur<-as.numeric(as.character(prefpilot$movedur))
# prefpilot$eff_mass<-as.numeric(as.character(prefpilot$eff_mass))
# prefpilot$reaction_tanv<-as.numeric(as.character(prefpilot$reaction_tanv))
# prefpilot$miss_rad<-as.numeric(as.character(prefpilot$miss_rad))
# prefpilot$peakvel_target<-as.numeric(as.character(prefpilot$peakvel_target))
# prefpilot=filter(prefpilot,movedur<1.5,movedur>.25,reaction_tanv<.5,miss_rad>.08,miss_rad<.2)
# Violin Plotting Function
vplot <- function(var,data,...){
exp = list(...)
string = paste('a = aggregate(',var,' ~ subj + eff_mass,data,mean)
b = aggregate(',var,' ~ subj + eff_mass,data,sd)
c = cbind(a,b$',var,')
colnames(c) = c(\'subj\',\'eff_mass\',\'dep_var\',\'dep_var_sd\')
d = aggregate(',var,' ~ eff_mass,data,mean)
e = aggregate(',var,' ~ eff_mass,a,sd)
e = cbind(e$eff_mass,d$',var,',e$',var,')
colnames(e) = c(\'eff_mass\',\'movedur_avg\',\'movedur_sd\')'
)
eval(parse(text=string))
string = paste('ggplot()+
geom_violin(data=data,aes(x=eff_mass,y=',var,',fill = factor(eff_mass)))+
scale_x_continuous(breaks=c(sort(unique(data$eff_mass))))+
scale_fill_manual(values=mass_colors)+
geom_point(data=aggregate(',var,'~subj+eff_mass,data,mean),aes(x=eff_mass,y=',var,'))+
geom_line(data=c,aes(x=eff_mass,y=dep_var,group=factor(subj)))+
geom_line(data=aggregate(',var,'~eff_mass,data,mean),aes(eff_mass,y=',var,'),size=1.5)+
geom_point(data=aggregate(',var,'~eff_mass,data,mean),aes(eff_mass,y=',var,'),size=5)+
geom_errorbar(data=data.frame(e),aes(x= eff_mass,y=movedur_avg, ymin = movedur_avg-movedur_sd,ymax=movedur_avg+movedur_sd)) +
theme(axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))+
labs(title=\'',exp,'\')
')
eval(parse(text = string))
}
# Function to produce summary statistics (mean and +/- sd)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
#Another stat summary function
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
color1 = c(255,255,0)/255
color2 = c(255,196,0)/255
color3 = c(216,117,1)/255
color4 = c(139,0,0)/255
mass_colors <- c(rgb(color1[1],color1[2],color1[3]),
rgb(color2[1],color2[2],color2[3]),
rgb(color3[1],color3[2],color3[3]),
rgb(color4[1],color4[2],color4[3]))
min_jerk_vel <- function(tm,dt){
ro = 0
rf = 0.1
tme=seq(0,tm,dt)
ts=tme/tm
t2=ts*ts
t3=t2*ts
t4=t3*ts
t5=t4*ts
v=((60*t3-30*t4-30*t2)/tm)*(ro-rf)
return(v)
}
mvttimes = aggregate(movedur ~ eff_mass,prefdata,mean)
#mvtimtes = seq(0.4,1.5,.01)
dt = 0.0001
reacttimes = c()
reactvels = c()
for (k in mvttimes$movedur){
v = c(rep(0,30*(.005/dt)),min_jerk_vel(k,dt))
for (k in min(which(v>0.10)):1){
if (sd(v[(k-10*.005/dt):k])<2e-3){
#print(k)
#print(v[k])
break
}
}
reacttimes = c(reacttimes,k*dt)
reactvels = c(reactvels,v[k])
}
# test <- data.frame('movedur' = mvttimes, 'reaction_time' = reacttimes1, 'algo' = 'minus3react')
# test2 <- data.frame('movedur' = mvttimes, 'reaction_time' = reacttimes2, 'algo' = 'minus4react')
# test = rbind(test,test2)
# ggplot()+geom_line(data=test,aes(x=movedur,y=reaction_time,group=algo))
react_sim <-read.csv('D:/Users/Gary/Google Drive/Muscle Modeling/Min_jerk files/Data/react_sim.csv')
values = c('minus3react','minus4react')
index = c(3,4)
react_sim$method = values[match(react_sim$method,index)]
ggplot()+geom_jitter(data=react_sim,aes(x=s,y=react_indx,color=factor(method)),width=0.05,height=0.05)+scale_y_continuous(breaks = seq(25,45,2))+labs(x='Speed condition (2= fast)',y='Reaction Time Index')+theme_bw()
ggplot()+geom_jitter(data=react_sim,aes(x=c,y=react_indx,color=factor(method)),width=0.05,height=0.05)+scale_y_continuous(breaks = seq(25,45,2))+labs(x='Mass Condition',y='Reaction Time Index')+theme_bw()
#mvtimtes = seq(0.4,1.5,.01)
dt = 0.0001
reacttimes = c()
reactvels = c()
for (k in mvttimes$movedur){
v = c(rep(0,30*(.005/dt)),min_jerk_vel(k,dt))
for (k in min(which(v>0.10)):1){
if (sd(v[(k-10*.005/dt):k])<2e-3){
#print(k)
#print(v[k])
break
}
}
reacttimes = c(reacttimes,k*dt)
reactvels = c(reactvels,v[k])
}
reactvels
reacttimes
min_jerk_vel <- function(tm,dt){
ro = 0
rf = 0.1
tme=seq(0,tm,dt)
ts=tme/tm
t2=ts*ts
t3=t2*ts
t4=t3*ts
t5=t4*ts
v=((60*t3-30*t4-30*t2)/tm)*(ro-rf)
return(v)
}
mvttimes = aggregate(movedur ~ eff_mass,prefdata,mean)
#mvtimtes = seq(0.4,1.5,.01)
dt = 0.0001
reacttimes = c()
reactvels = c()
for (k in mvttimes$movedur){
v = c(rep(0,30*(.005/dt)),min_jerk_vel(k,dt))
for (k in min(which(v>0.10)):1){
if (sd(v[(k-10*.005/dt):k])<2e-4){
#print(k)
#print(v[k])
break
}
}
reacttimes = c(reacttimes,k*dt)
reactvels = c(reactvels,v[k])
}
reacttimes
met_length
met_orig_length
# prefdata <-read.csv('D:/Users/Gary/Google Drive/Preferred Mass/FullData_noFML_test.csv')
metdata<-read.csv('D:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Data/Met_data_erik_test.csv')
met_orig_length = length(metdata$movedur)
met_length = length(metdata$movedur)
metdata <- filter(metdata,miss_dist<.1,movedur>.2,movedur<2,maxex<.2,reaction_tanv<.5,abs(missangle)<50)
index <- c(1,2,3,4)
values <- c(2.47,4.730,6.990,11.50)
metdata$eff_mass <- values[match(metdata$condition,index)]
metdata = cbind(metdata,metdata$trial%%2==0)
colnames(metdata) = append(colnames(metdata)[1:length(colnames(metdata))-1],'outward')
#metdata2 = metdata
met_orig_length
met_length
met_length = length(metdata$movedur)
met_orig_length-met_length
pref_orig_length
prefdata <-read.csv('D:/Users/Gary/Google Drive/Preferred Mass/NewData_noFML_test.csv')
19200/2
9600-8898
aggregate(reaction_tanv ~ speed, metdata,mean)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#library(ggforce)
library(ggthemes)
library(lmtest)
library(tidyr)
library(dplyr)
library(multcomp)
library(lme4)
library(knitr)
# library(readr)
# #====================== LOAD DATA - Neuromech ==============================
met_plots_dir <- 'D:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Graphs/'
pref_plots_dir <- 'D:/Users/Gary/Google Drive/Preferred Mass/Graphs/'
prefdata <-read.csv('D:/Users/Gary/Google Drive/Preferred Mass/NewData_noFML_test.csv')
# prefdata <-read.csv('D:/Users/Gary/Google Drive/Preferred Mass/FullData_noFML_test.csv')
metdata<-read.csv('D:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Data/Met_data_erik_test.csv')
mpdata <- read.csv('D:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Data/met_power_data.csv')
pilotdata <- read.csv('D:/Users/Gary/Google Drive/Preferred Mass/FullData_PilotnoFML_test.csv')
smalltdata <- read.csv('D:/Users/Gary/Google Drive/Preferred Mass/FullData_SmallTargetnoFML_test.csv')
eff_masses_pref <- read.csv('D:/Users/Gary/Google Drive/Preferred Mass/eff_masses.csv',header=0)
eff_masses_meta <- read.csv('D:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Data/eff_masses.csv',header=0)
#====================== LOAD DATA - Desky ==============================
# met_plots_dir <- 'E:/Google Drive/Muscle modeling/Metabolics/Graphs/'
# pref_plots_dir <- 'E:/Google Drive/Preferred Mass/Graphs/'
#
# prefdata <-read.csv('E:/Google Drive/Preferred Mass/NewData_noFML.csv')
# # prefdata <-read.csv('D:/Users/Gary/Google Drive/Preferred Mass/FullData_noFML_test.csv')
# metdata<-read.csv('E:/Google Drive/Muscle modeling/Metabolics/Data/Met_data_erik.csv')
# mpdata <- read.csv('E:/Google Drive/Muscle modeling/Metabolics/Data/met_power_data.csv')
# pilotdata <- read.csv('E:/Google Drive/Preferred Mass/FullData_PilotnoFML_test.csv')
# smalltdata <- read.csv('E:/Google Drive/Preferred Mass/FullData_SmallTargetnoFML.csv')
#
# eff_masses_pref <- read.csv('E:/Google Drive/Preferred Mass/eff_masses.csv',header=0)
# eff_masses_meta <- read.csv('E:/Google Drive/Muscle modeling/Metabolics/Data/eff_masses.csv',header=0)
#====================== LOAD DATA - Lappy ==============================
# met_plots_dir <- 'C:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Graphs/'
# pref_plots_dir <- 'C:/Users/Gary/Google Drive/Preferred Mass/Graphs/'
#
# prefdata <-read.csv('C:/Users/Gary/Google Drive/Preferred Mass/NewData_noFML.csv')
# metdata<-read.csv('C:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Lappy Data/Met_data_erik.csv')
# mpdata <- read.csv('C:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Lappy Data/met_power_data.csv')
# pilotdata <- read.csv('C:/Users/Gary/Google Drive/Preferred Mass/FullData_PilotnoFML_test.csv')
# smalltdata <- read.csv('C:/Users/Gary/Google Drive/Preferred Mass/FullData_SmallTargetnoFML.csv')
#
# eff_masses_pref <- read.csv('C:/Users/Gary/Google Drive/Preferred Mass/eff_masses.csv',header=0)
# eff_masses_meta <- read.csv('C:/Users/Gary/Google Drive/Muscle modeling/Metabolics/Lappy Data/eff_masses.csv',header=0)
# ======================================================================
pilotdata$reacttoback <- (pilotdata$idxmoveback - pilotdata$idxonset)*.005
prefdata$reaction_tanv <- .005*prefdata$reaction_tanv
pilotdata$reaction_tanv <- .005*pilotdata$reaction_tanv
pilotdata$movedur <- pilotdata$reacttoback
smalltdata$reaction_tanv <- .005*smalltdata$reaction_tanv
# ========================================================================
# Adding Column for estimated eff_mass to preferred experiment.
index <- c(0,3,5,8)
values <- c(2.5,3.8,4.7,6.1)
subjects = c(1,2,3,4,5,6,7,8,9,10,11,12)
prefdata$eff_mass <- values[match(prefdata$condition,index)]
pilotdata$eff_mass <- values[match(pilotdata$condition,index)]
smalltdata$eff_mass <- values[match(smalltdata$condition,index)]
eff_mass = numeric(length(prefdata$movedur))
for (i in 1:length(prefdata$movedur)){
eff_mass[i] = eff_masses_pref[match(prefdata$condition[i],index),match(prefdata$subj[i],subjects)]
}
prefdata$eff_mass2 <- eff_mass
# ========================================================================
#============================ Filtering Funciton =========================
filtering_func <- function(vars,data){
for (cond in c(0,3,5,8)){
filt_string = ""
for (var in vars){
eval(parse(text = paste(var,cond,' = boxplot.stats(filter(prefdata,condition == ',cond,')$',var,')$out', sep = "")))
eval(parse(text = paste(var,cond,'_high = min(',var,cond,'[',var,cond,'>median(filter(data,condition==',cond,')$',var,')])', sep = "")))
lowstring <- paste('if (length(',var,cond,'[',var,cond,'<mean(filter(data,condition==',cond,')$',var,')])>0){
',var,cond,'_low = max(',var,cond,'[',var,cond,'<mean(filter(data,condition==',cond,')$',var,')])
} else{
',var,cond,'_low = 0
}',sep="")
eval(parse(text = lowstring))
filt_string <- paste(filt_string,',',var,'<',var,cond,'_high,',var,'>',var,cond,'_low', sep = "")
}
eval(parse(text = paste('a',cond,' <- filter(data,condition == ',cond,filt_string,')', sep = "")))
}
data <- rbind(a0,a3,a5,a8)
return(data)
}
# ========================== Filtering ================================================
prefdata <- filtering_func(c('movedur','reaction_tanv','miss_dist'),prefdata)
prefdata <- filter(prefdata,maxex<.14,odd_trial==1)
# pilotdata <- filter(pilotdata,reacttoback<3.0,reacttoback>.25,idxonset1<100)
pilotdata <-filtering_func(c('movedur','reaction_tanv','miss_dist'),pilotdata)
pilotdata <- filter(pilotdata,maxex<.14)
smalltdata <- filtering_func(c('movedur','reaction_tanv'),smalltdata)
# smalltdata <- filter(pilotdata,max)
prefdata_factor <- prefdata
prefdata_factor$eff_mass <- as.factor(prefdata_factor$eff_mass)
prefdata_factor$condition <- as.factor(prefdata_factor$condition)
prefdata_factor$targetnum <- as.factor(prefdata_factor$targetnum)
# =========================== Generate the df for 3 experiments ===================
prefdata$exp <- 'pref'
pilotdata$exp <- 'pilot'
smalltdata$exp <- 'smallt'
allexp_plot <- function(vars,data,...){
str = paste('a=as.data.frame(cbind(',data,'$subj,',data,'$eff_mass,',data,'$condition,',data,'$exp',sep='')
for (var in vars){
# print(var)
str = paste(str,',',data,'$',var,sep='')
}
str = paste(str,'))',sep='')
a= eval(parse(text=str))
colnames(a) = c('subj','eff_mass','condition','exp',vars)
a$eff_mass = as.numeric(as.character(a$eff_mass))
a$condition = as.numeric(as.character(a$condition))
for (var in vars){
eval(parse(text = paste('a$',var,' = as.numeric(as.character(a$',var,'))',sep='')))
}
return(a)
}
vars = c('targetnum','movedur','peakvel_target','miss_dist','reaction_tanv','pathltar','missangle','miss_rad')
a=allexp_plot(vars,'prefdata')
b=allexp_plot(vars,'pilotdata')
c=allexp_plot(vars,'smalltdata')
prefpilot=data.frame(rbind(a,b,c))
prefpilot = filter(prefpilot,movedur<1.75)
# a=as.data.frame(cbind(pilotdata$subj,pilotdata$eff_mass,pilotdata$exp,pilotdata$targetnum,pilotdata$reacttoback,pilotdata$reaction_tanv,pilotdata$miss_rad,pilotdata$peakvel_target))
# b=as.data.frame(cbind(prefdata$subj,prefdata$eff_mass,prefdata$exp,prefdata$targetnum,prefdata$movedur,prefdata$reaction_tanv,prefdata$miss_rad,prefdata$peakvel_target))
# c=as.data.frame(cbind(smalltdata$subj,smalltdata$eff_mass,smalltdata$exp,smalltdata$targetnum,smalltdata$movedur,smalltdata$reaction_tanv,smalltdata$miss_rad,smalltdata$peakvel_target))
# prefpilot=data.frame(rbind(a,b,c))
# colnames(prefpilot) = cbind('subj','eff_mass','exp','targetnum','movedur','reaction_tanv','miss_rad','peakvel_target')
# prefpilot$movedur<-as.numeric(as.character(prefpilot$movedur))
# prefpilot$eff_mass<-as.numeric(as.character(prefpilot$eff_mass))
# prefpilot$reaction_tanv<-as.numeric(as.character(prefpilot$reaction_tanv))
# prefpilot$miss_rad<-as.numeric(as.character(prefpilot$miss_rad))
# prefpilot$peakvel_target<-as.numeric(as.character(prefpilot$peakvel_target))
# prefpilot=filter(prefpilot,movedur<1.5,movedur>.25,reaction_tanv<.5,miss_rad>.08,miss_rad<.2)
# Violin Plotting Function
vplot <- function(var,data,...){
exp = list(...)
string = paste('a = aggregate(',var,' ~ subj + eff_mass,data,mean)
b = aggregate(',var,' ~ subj + eff_mass,data,sd)
c = cbind(a,b$',var,')
colnames(c) = c(\'subj\',\'eff_mass\',\'dep_var\',\'dep_var_sd\')
d = aggregate(',var,' ~ eff_mass,data,mean)
e = aggregate(',var,' ~ eff_mass,a,sd)
e = cbind(e$eff_mass,d$',var,',e$',var,')
colnames(e) = c(\'eff_mass\',\'movedur_avg\',\'movedur_sd\')'
)
eval(parse(text=string))
string = paste('ggplot()+
geom_violin(data=data,aes(x=eff_mass,y=',var,',fill = factor(eff_mass)))+
scale_x_continuous(breaks=c(sort(unique(data$eff_mass))))+
scale_fill_manual(values=mass_colors)+
geom_point(data=aggregate(',var,'~subj+eff_mass,data,mean),aes(x=eff_mass,y=',var,'))+
geom_line(data=c,aes(x=eff_mass,y=dep_var,group=factor(subj)))+
geom_line(data=aggregate(',var,'~eff_mass,data,mean),aes(eff_mass,y=',var,'),size=1.5)+
geom_point(data=aggregate(',var,'~eff_mass,data,mean),aes(eff_mass,y=',var,'),size=5)+
geom_errorbar(data=data.frame(e),aes(x= eff_mass,y=movedur_avg, ymin = movedur_avg-movedur_sd,ymax=movedur_avg+movedur_sd)) +
theme(axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))+
labs(title=\'',exp,'\')
')
eval(parse(text = string))
}
# Function to produce summary statistics (mean and +/- sd)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
#Another stat summary function
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
color1 = c(255,255,0)/255
color2 = c(255,196,0)/255
color3 = c(216,117,1)/255
color4 = c(139,0,0)/255
mass_colors <- c(rgb(color1[1],color1[2],color1[3]),
rgb(color2[1],color2[2],color2[3]),
rgb(color3[1],color3[2],color3[3]),
rgb(color4[1],color4[2],color4[3]))
cftest(lmer(movedur ~ factor(targetnum) + eff_mass2 +  (~1|subj),data=prefdata))
cftest(lmer(movedur ~ factor(targetnum) + eff_mass2 +  (1|subj),data=prefdata))
predict(lmer(movedur ~ factor(targetnum) + eff_mass2 +  (1|subj),data=prefdata))
fit<-lmer(movedur ~ factor(targetnum) + eff_mass2 +  (1|subj),data=prefdata)
?filter
g
string = paste('g=ggplot(temp_pframe,aes(x=factor(variable),y=',param,'_val,color=factor(variable)))+
geom_point(size=3.5)+
geom_errorbar(aes(ymin=',param,'_val-',param,'_ste,ymax=',param,'_val+',param,'_ste),width=.3,size=1)',sep='')
eval(parse(text = paste(string)))
yminval=temp_pframe[length(fitting_vars),param_count*2+3]-temp_pframe[length(fitting_vars),param_count*2+4]
ymaxval=temp_pframe[length(fitting_vars),param_count*2+3]+temp_pframe[length(fitting_vars),param_count*2+4]
# g+
g<-g+
geom_rect(xmin=0,xmax=length(fitting_vars)+1,ymin=yminval,ymax=ymaxval,alpha=.01)+
scale_x_discrete(labels=parse(text=fitting_labs))+
labs(x='Effort Variable',title=eval(param),y=eval(param),color="Effort\nRep")+
scale_color_manual(labels=parse(text=fitting_labs),
values = colorRampPalette(brewer.pal(12,'Dark2'))(12))+
theme_classic(base_family='Times')+
theme(legend.position='none',axis.text.x = element_text(angle = 45, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))
library(ggplot2)
#library(ggforce)
library(ggthemes)
library(lmtest)
library(tidyr)
library(dplyr)
library(multcomp)
library(lme4)
library(knitr)
library(grid)
library(gridExtra)
library("RColorBrewer")
library(wesanderson)
library(extrafont)
library(cowplot)
library(latex2exp)
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R', echo=TRUE)
Q
Q
Q
Q
Q
Q
Q
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))+ylim([0,.7])
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))+ylim(c(0,.7)
)
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))+ylim(c(.1,.7))
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))+ylim(c(0,.4))
ggplot(rsq_frame,aes(fill=factor(minfunc),x=reorder(variable,variable),y=rsquared))+
geom_bar(position='dodge',stat='identity')+
theme_classic(base_family='Times')+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+#,axis.line = element_line(color='black',size = 1,linetype='solid'))+
scale_x_discrete(limits = (1:13), labels=parse(text=fitting_labs))+
labs(x='Fitted Variable',y='R Squared Value',fill=minparams)+
guides(fill=guide_legend(title="Minimization\nFunction"))+
scale_fill_manual(labels = parse(text = min_labs), values = colorRampPalette(brewer.pal(9,"Spectral"))(9))+ylim(c(0,1))
