Q
Q
Q
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
g
paste('fitplot_',var,'<-g',sep='')))
paste('fitplot_',var,'<-g',sep='')
var
var
fitting_vars
var=fitting_vars[2]
varfit_count = varfit_count+1
plotdata=filter(sumdata,minfunc==paste(minfunc1))
eval(parse(text = paste('fit_',minfunc1,'_',var,'=summary(lm(plotdata$mpowernet ~ plotdata$',var,'))',sep='')))
# print(paste('plot_',minfunc1,'_',var,sep=''))
int = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[1]',sep='')))
slope = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[2]',sep='')))
eval(parse(text = paste('tempdata = filter(sumdata,minfunc==\'',minfunc1,'\')',sep='')))
tempdata['temp_fitted'] = int + slope*tempdata[var]
tempdata['lintransform'] = slope*tempdata[var]
tempdata['unfitted'] = tempdata[var]
# tempdata['metabolic'] = 1
# tempdata['fitted'] = 0
# tempdata['unfitted'] = 2
tempdata = rbind(cbind(tempdata$c,
tempdata$effmass,
tempdata$movedur,
tempdata$mpowernet,
tempdata$temp_fitted,
tempdata$unfitted,
tempdata$lintransform))
tempdata=data.frame(tempdata)
colnames(tempdata)=c('c','effmass','movedur','mpowernet','fitted','unfitted','lintransform')
rsq_val = eval(parse(text=paste('round(fit_',minfunc1,'_',var,'$r.squared,digits = 3)',sep='')))
if (do_linfit_plots){
titlestr = paste('Min ',minfunc1,'\nR^2 = ',rsq_val,sep='')
string = paste('lmplot_',minfunc1,'_',var,'=
ggplot(data=plotdata,aes(x=',var,',y=mpowernet))+
geom_point()+geom_smooth(method=\'lm\')+
labs(title = \'',titlestr,'\',
x =\'',fitting_labs[varfit_count],'\',
y=\'Net Metabolic Power (W)\')+
theme_classic()+theme(plot.title = element_text(hjust = 0.5),axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))',sep='')
eval(parse(text = string))
}
rsq=c(rsq,rsq_val)
minfuncs_rsq=c(minfuncs_rsq,minparams[minfunc_count])
vars_rsq = c(vars_rsq,varfit_count)
vars_rsq_labs = c(vars_rsq_labs,var)
expo_rsq = c(expo_rsq,expo)
rsq_matrix[minfunc_count,varfit_count] = rsq_val
#================================================================
# Creating the fitted plots
MP_model=nls(mpowernet ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_met = summary(MP_model)
a=coef(MP_model)[1]
b=coef(MP_model)[2]*100
c=coef(MP_model)[3]
d=coef(MP_model)[4]
fun.1 <- function(t) a+b*(2.47^c)/(t^d)
fun.2 <- function(t) a+b*(4.73^c)/(t^d)
fun.3 <- function(t) a+b*(6.99^c)/(t^d)
fun.4 <- function(t) a+b*(11.50^c)/(t^d)
Fitted_model=nls(fitted ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_prox = summary(Fitted_model)
afit=coef(Fitted_model)[1]
bfit=coef(Fitted_model)[2]*100
cfit=coef(Fitted_model)[3]
dfit=coef(Fitted_model)[4]
fun.fit1 <- function(t) afit+bfit*(2.47^cfit)/(t^dfit)
fun.fit2 <- function(t) afit+bfit*(4.73^cfit)/(t^dfit)
fun.fit3 <- function(t) afit+bfit*(6.99^cfit)/(t^dfit)
fun.fit4 <- function(t) afit+bfit*(11.50^cfit)/(t^dfit)
# if (tempdata$metabolic[1]!="Metabolic"){
#   index <- c(0,1)
#   eval(parse(text=paste('values <- c(\'',var,'\',\'Metabolic\')',sep='')))
#   tempdata$metabolic = values[match(tempdata$metabolic,index)]
# }
a <- ggplot(tempdata,aes(x=movedur,y=mpowernet,color=factor(c)))+#,shape=factor(metabolic)))+
geom_point(size=3)+
geom_point(data = tempdata,
aes(x=movedur,y=mpowernet),
shape=21,
fill=factor(c),
color='black',
size=3)#+
# geom_point(data=filter(tempdata,metabolic==var),
#            aes(x=movedur,y=mpowernet),
#            shape=24,
#            fill=factor(c),
#            color='black',
#            size=3)
a <- a +
# stat_function(fun=fun.1,size=3,color=mass_colors[1])+
# stat_function(fun=fun.2,size=3,color=mass_colors[2])+
# stat_function(fun=fun.3,size=3,color=mass_colors[3])+
# stat_function(fun=fun.4,size=3,color=mass_colors[4])+
stat_function(fun=fun.fit1,size=1.5,color=mass_colors[1])+#, linetype="dashed")+
stat_function(fun=fun.fit2,size=1.5,color=mass_colors[2])+#, linetype="dashed")+
stat_function(fun=fun.fit3,size=1.5,color=mass_colors[3])+#, linetype="dashed")+
stat_function(fun=fun.fit4,size=1.5,color=mass_colors[4])+#, linetype="dashed")+
scale_color_manual(values = mass_colors)
a <- a + labs(y='Metabolic Power (W)',x='Movement Duration (s)',shape='Metabolic',color='Effective\nMass (kg)')
a <- a + theme_classic()+theme(plot.title = element_text(hjust = 0.5),
# axis.line = element_line(color='black',size = 1,linetype='solid'),
#text=element_text(family="Arial"),
legend.position='none')
a
g
a
g
fitplot_sumtorque2
var=fitting_vars[1]
varfit_count = varfit_count+1
plotdata=filter(sumdata,minfunc==paste(minfunc1))
eval(parse(text = paste('fit_',minfunc1,'_',var,'=summary(lm(plotdata$mpowernet ~ plotdata$',var,'))',sep='')))
# print(paste('plot_',minfunc1,'_',var,sep=''))
int = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[1]',sep='')))
slope = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[2]',sep='')))
eval(parse(text = paste('tempdata = filter(sumdata,minfunc==\'',minfunc1,'\')',sep='')))
tempdata['temp_fitted'] = int + slope*tempdata[var]
tempdata['lintransform'] = slope*tempdata[var]
tempdata['unfitted'] = tempdata[var]
# tempdata['metabolic'] = 1
# tempdata['fitted'] = 0
# tempdata['unfitted'] = 2
tempdata = rbind(cbind(tempdata$c,
tempdata$effmass,
tempdata$movedur,
tempdata$mpowernet,
tempdata$temp_fitted,
tempdata$unfitted,
tempdata$lintransform))
tempdata=data.frame(tempdata)
colnames(tempdata)=c('c','effmass','movedur','mpowernet','fitted','unfitted','lintransform')
rsq_val = eval(parse(text=paste('round(fit_',minfunc1,'_',var,'$r.squared,digits = 3)',sep='')))
if (do_linfit_plots){
titlestr = paste('Min ',minfunc1,'\nR^2 = ',rsq_val,sep='')
string = paste('lmplot_',minfunc1,'_',var,'=
ggplot(data=plotdata,aes(x=',var,',y=mpowernet))+
geom_point()+geom_smooth(method=\'lm\')+
labs(title = \'',titlestr,'\',
x =\'',fitting_labs[varfit_count],'\',
y=\'Net Metabolic Power (W)\')+
theme_classic()+theme(plot.title = element_text(hjust = 0.5),axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))',sep='')
eval(parse(text = string))
}
rsq=c(rsq,rsq_val)
minfuncs_rsq=c(minfuncs_rsq,minparams[minfunc_count])
vars_rsq = c(vars_rsq,varfit_count)
vars_rsq_labs = c(vars_rsq_labs,var)
expo_rsq = c(expo_rsq,expo)
rsq_matrix[minfunc_count,varfit_count] = rsq_val
#================================================================
# Creating the fitted plots
MP_model=nls(mpowernet ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_met = summary(MP_model)
a=coef(MP_model)[1]
b=coef(MP_model)[2]*100
c=coef(MP_model)[3]
d=coef(MP_model)[4]
fun.1 <- function(t) a+b*(2.47^c)/(t^d)
fun.2 <- function(t) a+b*(4.73^c)/(t^d)
fun.3 <- function(t) a+b*(6.99^c)/(t^d)
fun.4 <- function(t) a+b*(11.50^c)/(t^d)
Fitted_model=nls(fitted ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_prox = summary(Fitted_model)
afit=coef(Fitted_model)[1]
bfit=coef(Fitted_model)[2]*100
cfit=coef(Fitted_model)[3]
dfit=coef(Fitted_model)[4]
fun.fit1 <- function(t) afit+bfit*(2.47^cfit)/(t^dfit)
fun.fit2 <- function(t) afit+bfit*(4.73^cfit)/(t^dfit)
fun.fit3 <- function(t) afit+bfit*(6.99^cfit)/(t^dfit)
fun.fit4 <- function(t) afit+bfit*(11.50^cfit)/(t^dfit)
# if (tempdata$metabolic[1]!="Metabolic"){
#   index <- c(0,1)
#   eval(parse(text=paste('values <- c(\'',var,'\',\'Metabolic\')',sep='')))
#   tempdata$metabolic = values[match(tempdata$metabolic,index)]
# }
g
fitplot_sumtorque2
a
g
Q
Q
varfit_count
varfit_count=1
var=fitting_vars[1]
plotdata=filter(sumdata,minfunc==paste(minfunc1))
eval(parse(text = paste('fit_',minfunc1,'_',var,'=summary(lm(plotdata$mpowernet ~ plotdata$',var,'))',sep='')))
# print(paste('plot_',minfunc1,'_',var,sep=''))
int = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[1]',sep='')))
slope = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[2]',sep='')))
eval(parse(text = paste('tempdata = filter(sumdata,minfunc==\'',minfunc1,'\')',sep='')))
tempdata['temp_fitted'] = int + slope*tempdata[var]
tempdata['lintransform'] = slope*tempdata[var]
tempdata['unfitted'] = tempdata[var]
# tempdata['metabolic'] = 1
# tempdata['fitted'] = 0
# tempdata['unfitted'] = 2
tempdata = rbind(cbind(tempdata$c,
tempdata$effmass,
tempdata$movedur,
tempdata$mpowernet,
tempdata$temp_fitted,
tempdata$unfitted,
tempdata$lintransform))
tempdata=data.frame(tempdata)
colnames(tempdata)=c('c','effmass','movedur','mpowernet','fitted','unfitted','lintransform')
rsq_val = eval(parse(text=paste('round(fit_',minfunc1,'_',var,'$r.squared,digits = 3)',sep='')))
if (do_linfit_plots){
titlestr = paste('Min ',minfunc1,'\nR^2 = ',rsq_val,sep='')
string = paste('lmplot_',minfunc1,'_',var,'=
ggplot(data=plotdata,aes(x=',var,',y=mpowernet))+
geom_point()+geom_smooth(method=\'lm\')+
labs(title = \'',titlestr,'\',
x =\'',fitting_labs[varfit_count],'\',
y=\'Net Metabolic Power (W)\')+
theme_classic()+theme(plot.title = element_text(hjust = 0.5),axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))',sep='')
eval(parse(text = string))
}
rsq=c(rsq,rsq_val)
minfuncs_rsq=c(minfuncs_rsq,minparams[minfunc_count])
vars_rsq = c(vars_rsq,varfit_count)
vars_rsq_labs = c(vars_rsq_labs,var)
expo_rsq = c(expo_rsq,expo)
rsq_matrix[minfunc_count,varfit_count] = rsq_val
#================================================================
# Creating the fitted plots
MP_model=nls(mpowernet ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_met = summary(MP_model)
a=coef(MP_model)[1]
b=coef(MP_model)[2]*100
c=coef(MP_model)[3]
d=coef(MP_model)[4]
fun.1 <- function(t) a+b*(2.47^c)/(t^d)
fun.2 <- function(t) a+b*(4.73^c)/(t^d)
fun.3 <- function(t) a+b*(6.99^c)/(t^d)
fun.4 <- function(t) a+b*(11.50^c)/(t^d)
Fitted_model=nls(fitted ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_prox = summary(Fitted_model)
afit=coef(Fitted_model)[1]
bfit=coef(Fitted_model)[2]*100
cfit=coef(Fitted_model)[3]
dfit=coef(Fitted_model)[4]
fun.fit1 <- function(t) afit+bfit*(2.47^cfit)/(t^dfit)
fun.fit2 <- function(t) afit+bfit*(4.73^cfit)/(t^dfit)
fun.fit3 <- function(t) afit+bfit*(6.99^cfit)/(t^dfit)
fun.fit4 <- function(t) afit+bfit*(11.50^cfit)/(t^dfit)
# if (tempdata$metabolic[1]!="Metabolic"){
#   index <- c(0,1)
#   eval(parse(text=paste('values <- c(\'',var,'\',\'Metabolic\')',sep='')))
#   tempdata$metabolic = values[match(tempdata$metabolic,index)]
# }
if (do_linfit_plots){
g <- ggplot(tempdata,aes(x=movedur,y=mpowernet,color=factor(c)))+#,shape=factor(metabolic)))+
geom_point(size=3)+
geom_point(data = tempdata,
aes(x=movedur,y=mpowernet),
shape=21,
fill=factor(c),
color='black',
size=3)#+
# geom_point(data=filter(tempdata,metabolic==var),
#            aes(x=movedur,y=mpowernet),
#            shape=24,
#            fill=factor(c),
#            color='black',
#            size=3)
g <- g +
# stat_function(fun=fun.1,size=3,color=mass_colors[1])+
# stat_function(fun=fun.2,size=3,color=mass_colors[2])+
# stat_function(fun=fun.3,size=3,color=mass_colors[3])+
# stat_function(fun=fun.4,size=3,color=mass_colors[4])+
stat_function(fun=fun.fit1,size=1.5,color=mass_colors[1])+#, linetype="dashed")+
stat_function(fun=fun.fit2,size=1.5,color=mass_colors[2])+#, linetype="dashed")+
stat_function(fun=fun.fit3,size=1.5,color=mass_colors[3])+#, linetype="dashed")+
stat_function(fun=fun.fit4,size=1.5,color=mass_colors[4])+#, linetype="dashed")+
scale_color_manual(values = mass_colors)
g <- g + labs(y='Metabolic Power (W)',x='Movement Duration (s)',shape='Metabolic',color='Effective\nMass (kg)')
g <- g + theme_classic()+theme(plot.title = element_text(hjust = 0.5),
# axis.line = element_line(color='black',size = 1,linetype='solid'),
#text=element_text(family="Arial"),
legend.position='none')
eval(parse(text = paste('g<-g+labs(title=\'Fitting ',var,'\nMin ',minfunc1,', R^2=',rsq_val,'\')')))
eval(parse(text = paste('fitplot_',var,'<-g',sep='')))
}
fitplot_sumtorque
fitplot_sumtorque2
fitplot_sumtorque
var=fitting_vars[2]
varfit_count = varfit_count+1
plotdata=filter(sumdata,minfunc==paste(minfunc1))
eval(parse(text = paste('fit_',minfunc1,'_',var,'=summary(lm(plotdata$mpowernet ~ plotdata$',var,'))',sep='')))
# print(paste('plot_',minfunc1,'_',var,sep=''))
int = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[1]',sep='')))
slope = eval(parse(text = paste('fit_',minfunc1,'_',var,'$coefficients[2]',sep='')))
eval(parse(text = paste('tempdata = filter(sumdata,minfunc==\'',minfunc1,'\')',sep='')))
tempdata['temp_fitted'] = int + slope*tempdata[var]
tempdata['lintransform'] = slope*tempdata[var]
tempdata['unfitted'] = tempdata[var]
# tempdata['metabolic'] = 1
# tempdata['fitted'] = 0
# tempdata['unfitted'] = 2
tempdata = rbind(cbind(tempdata$c,
tempdata$effmass,
tempdata$movedur,
tempdata$mpowernet,
tempdata$temp_fitted,
tempdata$unfitted,
tempdata$lintransform))
tempdata=data.frame(tempdata)
colnames(tempdata)=c('c','effmass','movedur','mpowernet','fitted','unfitted','lintransform')
rsq_val = eval(parse(text=paste('round(fit_',minfunc1,'_',var,'$r.squared,digits = 3)',sep='')))
if (do_linfit_plots){
titlestr = paste('Min ',minfunc1,'\nR^2 = ',rsq_val,sep='')
string = paste('lmplot_',minfunc1,'_',var,'=
ggplot(data=plotdata,aes(x=',var,',y=mpowernet))+
geom_point()+geom_smooth(method=\'lm\')+
labs(title = \'',titlestr,'\',
x =\'',fitting_labs[varfit_count],'\',
y=\'Net Metabolic Power (W)\')+
theme_classic()+theme(plot.title = element_text(hjust = 0.5),axis.line = element_line(color=\'black\',size = 1,linetype=\'solid\'))',sep='')
eval(parse(text = string))
}
rsq=c(rsq,rsq_val)
minfuncs_rsq=c(minfuncs_rsq,minparams[minfunc_count])
vars_rsq = c(vars_rsq,varfit_count)
vars_rsq_labs = c(vars_rsq_labs,var)
expo_rsq = c(expo_rsq,expo)
rsq_matrix[minfunc_count,varfit_count] = rsq_val
#================================================================
# Creating the fitted plots
MP_model=nls(mpowernet ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_met = summary(MP_model)
a=coef(MP_model)[1]
b=coef(MP_model)[2]*100
c=coef(MP_model)[3]
d=coef(MP_model)[4]
fun.1 <- function(t) a+b*(2.47^c)/(t^d)
fun.2 <- function(t) a+b*(4.73^c)/(t^d)
fun.3 <- function(t) a+b*(6.99^c)/(t^d)
fun.4 <- function(t) a+b*(11.50^c)/(t^d)
Fitted_model=nls(fitted ~ a1 + 100*a2*(effmass^a3)/(movedur^a4),
data=tempdata,
start=list(a1=1,a2=.1,a3=1,a4=1))
modelsum_prox = summary(Fitted_model)
afit=coef(Fitted_model)[1]
bfit=coef(Fitted_model)[2]*100
cfit=coef(Fitted_model)[3]
dfit=coef(Fitted_model)[4]
fun.fit1 <- function(t) afit+bfit*(2.47^cfit)/(t^dfit)
fun.fit2 <- function(t) afit+bfit*(4.73^cfit)/(t^dfit)
fun.fit3 <- function(t) afit+bfit*(6.99^cfit)/(t^dfit)
fun.fit4 <- function(t) afit+bfit*(11.50^cfit)/(t^dfit)
# if (tempdata$metabolic[1]!="Metabolic"){
#   index <- c(0,1)
#   eval(parse(text=paste('values <- c(\'',var,'\',\'Metabolic\')',sep='')))
#   tempdata$metabolic = values[match(tempdata$metabolic,index)]
# }
if (do_linfit_plots){
g <- ggplot(tempdata,aes(x=movedur,y=mpowernet,color=factor(c)))+#,shape=factor(metabolic)))+
geom_point(size=3)+
geom_point(data = tempdata,
aes(x=movedur,y=mpowernet),
shape=21,
fill=factor(c),
color='black',
size=3)#+
# geom_point(data=filter(tempdata,metabolic==var),
#            aes(x=movedur,y=mpowernet),
#            shape=24,
#            fill=factor(c),
#            color='black',
#            size=3)
g <- g +
# stat_function(fun=fun.1,size=3,color=mass_colors[1])+
# stat_function(fun=fun.2,size=3,color=mass_colors[2])+
# stat_function(fun=fun.3,size=3,color=mass_colors[3])+
# stat_function(fun=fun.4,size=3,color=mass_colors[4])+
stat_function(fun=fun.fit1,size=1.5,color=mass_colors[1])+#, linetype="dashed")+
stat_function(fun=fun.fit2,size=1.5,color=mass_colors[2])+#, linetype="dashed")+
stat_function(fun=fun.fit3,size=1.5,color=mass_colors[3])+#, linetype="dashed")+
stat_function(fun=fun.fit4,size=1.5,color=mass_colors[4])+#, linetype="dashed")+
scale_color_manual(values = mass_colors)
g <- g + labs(y='Metabolic Power (W)',x='Movement Duration (s)',shape='Metabolic',color='Effective\nMass (kg)')
g <- g + theme_classic()+theme(plot.title = element_text(hjust = 0.5),
# axis.line = element_line(color='black',size = 1,linetype='solid'),
#text=element_text(family="Arial"),
legend.position='none')
eval(parse(text = paste('g<-g+labs(title=\'Fitting ',var,'\nMin ',minfunc1,', R^2=',rsq_val,'\')')))
eval(parse(text = paste('fitplot_',var,'<-g',sep='')))
}
fitplot_sumtorque2
string = paste('fittedvar1_',minfunc1,
'=plot_grid(fitplot_sumtorque,
fitplot_sumtorque2,
align = \'vh\',
hjust=-1,
nrow=1)',sep='')
eval(parse(text=string))
fittedvar1_stress
fitplot_sumtorque
fitplot_sumtorque2
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fitplot_sumtorque
fitplot_sumtorque
fitplot_sumtorque2
rm g
rm(g)
g
rm(g)
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
g
fitplot_sumactstate
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
eval(parse(text = paste('fitplot_',var,'<-g',sep='')))
fitplot_sumtorque
paste('fitplot_',var,'<-g',sep='')
g
eval(parse(text = paste('fitplot_',var,'<-g',sep='')))
fitplot_sumtorque2
fitplot_sumtorque
test_plots[var] = g
test_plots[[var]] = g
test_plots<-list()
test_plots[[var]] = g
test_plots
test_plots["sumtorque2"]
g
g
test_plots[[var]] = g
test_plots[[var]]
fit_plots <- list)_
fit_plots <- list()
fit_plots[var] = g
fit_plots[[var]] = g
fit_plots[[var]]
fit_plots[[var]]+labs(x=test)
fit_plots[[var]]+labs(x='test')
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots[["sumtorque"]]
fit_plots[["sumtorque2"]]
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots
fit_plots[['sumtorque']]
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots
fit_plots[['sumtorque']]
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots
fit_plots
Q
Q
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots
Q
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
Q
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
fit_plots
fit_plots
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
Q
Q
debugSource('D:/Users/Gary/Google Drive/2019 Model/testing.R')
